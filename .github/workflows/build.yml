name: Nordic nRF Matter Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]
  workflow_dispatch:
    inputs:
      board_target:
        description: 'Board target to build'
        required: false
        default: 'nrf52840dk/nrf52840'
        type: choice
        options:
          - nrf52840dk/nrf52840
          - nrf5340dk/nrf5340/cpuapp
          - nrf7002dk/nrf5340/cpuapp
          - nrf54l15dk/nrf54l15/cpuapp
          - nrf54l15dk/nrf54l10/cpuapp
      build_config:
        description: 'Build configuration'
        required: false
        default: 'debug'
        type: choice
        options:
          - debug
          - release

env:
  NCS_VERSION: 'v3.0.2'
  MATTER_APP_NAME: 'template'
  
jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: nordicplayground/nrfconnect-sdk:v3.0.2
      options: --user root
    
    strategy:
      matrix:
        board: 
          - nrf52840dk/nrf52840
          - nrf5340dk/nrf5340/cpuapp
          - nrf7002dk/nrf5340/cpuapp
          - nrf54l15dk/nrf54l15/cpuapp
          - nrf54l15dk/nrf54l10/cpuapp
        config: [debug, release]
        exclude:
          # nRF21540DK는 일부 기능 제한으로 제외
          - board: nrf21540dk/nrf52840
        
    outputs:
      build-version: ${{ steps.version.outputs.version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set build version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          VERSION=${{ github.event.release.tag_name }}
        elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
          VERSION="v$(date +%Y%m%d)-${GITHUB_SHA:0:7}"
        else
          VERSION="dev-${GITHUB_SHA:0:7}"
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Building version: ${VERSION}"
        
    - name: Setup build environment
      run: |
        # West 초기화 및 업데이트 (NCS 3.0.2 최적화)
        west init -l .
        west update --narrow -o=--depth=1
        
        # Python 의존성 설치 (NCS 3.0.2 호환)
        pip3 install --upgrade pip
        pip3 install -r nrf/scripts/requirements-build.txt
        pip3 install -r bootloader/mcuboot/scripts/requirements.txt
        
        # Matter 의존성 추가 설치
        pip3 install -r modules/lib/matter/scripts/requirements.txt || true
        
        # Zephyr 환경 설정
        source zephyr/zephyr-env.sh
        
    - name: Cache West modules
      uses: actions/cache@v3
      with:
        path: |
          modules/
          tools/
          bootloader/
          zephyr/
        key: ${{ runner.os }}-west-${{ env.NCS_VERSION }}-${{ hashFiles('west.yml') }}
        restore-keys: |
          ${{ runner.os }}-west-${{ env.NCS_VERSION }}-
          
    - name: Build firmware
      run: |
        BOARD_TARGET="${{ matrix.board }}"
        BUILD_CONFIG="${{ matrix.config }}"
        
        # 빌드 디렉토리 생성
        BUILD_DIR="build_${BOARD_TARGET//\//_}_${BUILD_CONFIG}"
        
        # NCS 3.0.2에서의 설정에 따른 추가 옵션
        EXTRA_CONF=""
        if [ "${BUILD_CONFIG}" = "release" ]; then
          EXTRA_CONF="-DFILE_SUFFIX=release"
          EXTRA_CONF="${EXTRA_CONF} -Dtemplate_EXTRA_CONF_FILE=prj_release.conf"
        fi
        
        # Matter 템플릿 빌드 (NCS 3.0.2 sysbuild 사용)
        west build -p auto -b ${BOARD_TARGET} \
          --build-dir ${BUILD_DIR} \
          --sysbuild \
          -- ${EXTRA_CONF} \
          -DCONFIG_CHIP_DEVICE_VENDOR_NAME="\"MyCompany\"" \
          -DCONFIG_CHIP_DEVICE_PRODUCT_NAME="\"SensorDevice\"" \
          -DCONFIG_CHIP_DEVICE_PRODUCT_ID=32768
          
        # 빌드 정보 저장
        echo "Board: ${BOARD_TARGET}" > ${BUILD_DIR}/build_info.txt
        echo "Config: ${BUILD_CONFIG}" >> ${BUILD_DIR}/build_info.txt
        echo "Version: ${{ steps.version.outputs.version }}" >> ${BUILD_DIR}/build_info.txt
        echo "NCS Version: ${{ env.NCS_VERSION }}" >> ${BUILD_DIR}/build_info.txt
        echo "Commit: ${GITHUB_SHA}" >> ${BUILD_DIR}/build_info.txt
        echo "Build Date: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> ${BUILD_DIR}/build_info.txt
        
    - name: Generate build artifacts
      run: |
        BOARD_TARGET="${{ matrix.board }}"
        BUILD_CONFIG="${{ matrix.config }}"
        BUILD_DIR="build_${BOARD_TARGET//\//_}_${BUILD_CONFIG}"
        ARTIFACT_DIR="artifacts_${BOARD_TARGET//\//_}_${BUILD_CONFIG}"
        
        mkdir -p ${ARTIFACT_DIR}
        
        # NCS 3.0.2 sysbuild 구조에서 주요 빌드 파일들 복사
        # 메인 애플리케이션
        if [ -f "${BUILD_DIR}/template/zephyr/zephyr.hex" ]; then
          cp "${BUILD_DIR}/template/zephyr/zephyr.hex" "${ARTIFACT_DIR}/"
        fi
        
        if [ -f "${BUILD_DIR}/template/zephyr/zephyr.elf" ]; then
          cp "${BUILD_DIR}/template/zephyr/zephyr.elf" "${ARTIFACT_DIR}/"
        fi
        
        if [ -f "${BUILD_DIR}/template/zephyr/app_update.bin" ]; then
          cp "${BUILD_DIR}/template/zephyr/app_update.bin" "${ARTIFACT_DIR}/"
        fi
        
        # Merged hex 파일 (MCUboot + 애플리케이션)
        if [ -f "${BUILD_DIR}/zephyr/merged.hex" ]; then
          cp "${BUILD_DIR}/zephyr/merged.hex" "${ARTIFACT_DIR}/complete_firmware.hex"
        fi
        
        # DFU 파일들
        if [ -f "${BUILD_DIR}/dfu_application.zip" ]; then
          cp "${BUILD_DIR}/dfu_application.zip" "${ARTIFACT_DIR}/"
        fi
        
        # MCUboot 관련 파일
        if [ -f "${BUILD_DIR}/mcuboot/zephyr/zephyr.hex" ]; then
          cp "${BUILD_DIR}/mcuboot/zephyr/zephyr.hex" "${ARTIFACT_DIR}/mcuboot.hex"
        fi
        
        # 빌드 정보 및 로그
        cp "${BUILD_DIR}/build_info.txt" "${ARTIFACT_DIR}/"
        
        # 빌드 리포트 생성 (NCS 3.0.2 방식)
        west build --build-dir ${BUILD_DIR} -t template_ram_report > "${ARTIFACT_DIR}/ram_report.txt" 2>/dev/null || \
        west build --build-dir ${BUILD_DIR}/template -t ram_report > "${ARTIFACT_DIR}/ram_report.txt" 2>/dev/null || true
        
        west build --build-dir ${BUILD_DIR} -t template_rom_report > "${ARTIFACT_DIR}/rom_report.txt" 2>/dev/null || \
        west build --build-dir ${BUILD_DIR}/template -t rom_report > "${ARTIFACT_DIR}/rom_report.txt" 2>/dev/null || true
        
        # 설정 정보 저장
        if [ -f "${BUILD_DIR}/template/zephyr/.config" ]; then
          cp "${BUILD_DIR}/template/zephyr/.config" "${ARTIFACT_DIR}/zephyr_config.txt"
        fi
        
        # 파일 크기 정보
        ls -la ${ARTIFACT_DIR}/ > "${ARTIFACT_DIR}/file_sizes.txt"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: firmware-${{ matrix.board }}-${{ matrix.config }}-${{ steps.version.outputs.version }}
        path: artifacts_*
        retention-days: 30
        
    - name: Upload build logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ matrix.board }}-${{ matrix.config }}
        path: |
          build_*/build.log
          build_*/CMakeCache.txt
          build_*/CMakeFiles/CMakeError.log
        retention-days: 7

  firmware-package:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: all-artifacts
        
    - name: Create firmware package
      run: |
        VERSION="${{ needs.build.outputs.build-version }}"
        PACKAGE_NAME="matter-sensor-firmware-${VERSION}"
        
        mkdir -p ${PACKAGE_NAME}
        
        # 모든 아티팩트를 패키지로 구성
        find all-artifacts -name "*.hex" -exec cp {} ${PACKAGE_NAME}/ \;
        find all-artifacts -name "*.elf" -exec cp {} ${PACKAGE_NAME}/ \;
        find all-artifacts -name "*.bin" -exec cp {} ${PACKAGE_NAME}/ \;
        find all-artifacts -name "*.zip" -exec cp {} ${PACKAGE_NAME}/ \;
        find all-artifacts -name "build_info.txt" -exec cp {} ${PACKAGE_NAME}/ \;
        
        # README 생성
        cat > ${PACKAGE_NAME}/README.md << EOF
        # Matter Sensor Firmware Package
        
        Version: ${VERSION}
        Build Date: $(date -u +%Y-%m-%dT%H:%M:%SZ)
        Commit: ${GITHUB_SHA}
        
        ## Files Description
        
        - \`*.hex\`: Flash programming files for Nordic nRF devices
        - \`*.elf\`: ELF files for debugging
        - \`*.bin\`: Update binary files for OTA
        - \`*.zip\`: DFU packages for nRF Connect for Mobile
        - \`build_info.txt\`: Build information and configuration
        
        ## Supported Boards (NCS 3.0.2)
        
        - nRF52840 DK (Thread/BLE)
        - nRF5340 DK (Thread/BLE, Dual Core)
        - nRF7002 DK (Wi-Fi/Thread/BLE)
        - nRF54L15 DK (Thread/BLE, Latest Silicon)
        
        ## NCS Version
        
        Built with Nordic nRF Connect SDK v3.0.2
        
        ## Flashing Instructions
        
        ### Using nRF Connect Programmer
        1. Connect your nRF board via USB
        2. Open nRF Connect Programmer
        3. Select your device
        4. Load the corresponding .hex file
        5. Click "Write"
        
        ### Using west command
        \`\`\`bash
        west flash --hex-file <board_config>.hex
        \`\`\`
        EOF
        
        # 체크섬 생성
        find ${PACKAGE_NAME} -type f -exec sha256sum {} \; > ${PACKAGE_NAME}/checksums.sha256
        
        # ZIP 패키지 생성
        zip -r ${PACKAGE_NAME}.zip ${PACKAGE_NAME}/
        
    - name: Upload firmware package
      uses: actions/upload-artifact@v4
      with:
        name: complete-firmware-package-${{ needs.build.outputs.build-version }}
        path: matter-sensor-firmware-*.zip
        retention-days: 90
        
    - name: Release firmware package
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: matter-sensor-firmware-*.zip
        tag_name: ${{ github.event.release.tag_name }}
        
  security-scan:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        path: scan-artifacts
        
    - name: Security scan
      run: |
        # ELF 파일 보안 검사 (예시)
        find scan-artifacts -name "*.elf" | while read elf_file; do
          echo "Scanning ${elf_file}..."
          # 실제 보안 스캔 도구 사용
          file "${elf_file}"
          readelf -h "${elf_file}" || true
        done
        
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-report
        path: security-*.txt
        retention-days: 30

  notify:
    runs-on: ubuntu-latest
    needs: [build, firmware-package]
    if: always()
    
    steps:
    - name: Notify build status
      run: |
        if [ "${{ needs.build.result }}" = "success" ]; then
          echo "✅ Build completed successfully"
          echo "Version: ${{ needs.build.outputs.build-version }}"
        else
          echo "❌ Build failed"
        fi
        
        # Slack 또는 다른 알림 서비스 통합 가능
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"Build Status: ${{ needs.build.result }}"}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}